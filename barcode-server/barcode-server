#!/usr/bin/python
#
# Copyright 2020 Benjamin Gilbert
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

SHIFTS = (42, 54)
KEYCODES = {
    2: '1',
    3: '2',
    4: '3',
    5: '4',
    6: '5',
    7: '6',
    8: '7',
    9: '8',
    10: '9',
    11: '0',
    12: '-',
    13: '=',
    15: '\t',
    16: 'q',
    17: 'w',
    18: 'e',
    19: 'r',
    20: 't',
    21: 'y',
    22: 'u',
    23: 'i',
    24: 'o',
    25: 'p',
    26: '{',
    27: '}',
    28: '\n',
    30: 'a',
    31: 's',
    32: 'd',
    33: 'f',
    34: 'g',
    35: 'h',
    36: 'j',
    37: 'k',
    38: 'l',
    39: ';',
    40: '\'',
    41: '`',
    43: '\\',
    44: 'z',
    45: 'x',
    46: 'c',
    47: 'v',
    48: 'b',
    49: 'n',
    50: 'm',
    51: ',',
    52: '.',
    53: '/',
    57: ' ',
}

import errno
import fcntl
from libinput import LibInput, ContextType, KeyState
import os
from queue import SimpleQueue
from selectors import DefaultSelector, EVENT_READ
import socket
import sys
from systemd import daemon
import threading
import traceback

queue_list = []
queue_list_lock = threading.Lock()

def device_thread(input_path):
    li = LibInput(ContextType.PATH)
    li.add_device(input_path)

    # EVIOCGRAB, to prevent barcode scanner from trying to log in on tty1.
    # It's either this or monkey-patch libinput.Interface.
    dirpath = '/proc/self/fd'
    for filename in os.listdir(dirpath):
        try:
            target = os.readlink(os.path.join(dirpath, filename))
        except OSError:
            continue
        if target == os.path.realpath(input_path):
            fcntl.ioctl(int(filename), 0x40044590, 1)
            break
    else:
        raise OSError("Couldn't find event device fd to grab")

    shifted = False
    for event in li.events:
        if event.type.is_keyboard():
            if event.key in SHIFTS:
                shifted = (event.key_state == KeyState.PRESSED)
            elif event.key in KEYCODES and event.key_state == KeyState.PRESSED:
                char = KEYCODES[event.key]
                if shifted:
                    char = char.upper()
                with queue_list_lock:
                    for queue in queue_list:
                        queue.put(char.encode())


def accept_thread():
    try:
        selector = DefaultSelector()
        for fd in daemon.listen_fds():
            listener = socket.fromfd(fd, socket.AF_INET6, socket.SOCK_STREAM)
            listener.setblocking(False)
            selector.register(listener, EVENT_READ)
        while True:
            for key, _ in selector.select():
                while True:
                    try:
                        conn, _ = key.fileobj.accept()
                    except OSError as e:
                        if e.errno == errno.EAGAIN:
                            break
                        else:
                            raise
                    threading.Thread(target=connection_thread, args=(conn,), daemon=True).start()
    except Exception as e:
        traceback.print_exc(file=sys.stderr)


def connection_thread(conn):
    try:
        conn.setblocking(True)
        queue = SimpleQueue()
        with queue_list_lock:
            queue_list.append(queue)
        try:
            while True:
                contents = queue.get()
                conn.sendall(contents)
        except OSError as e:
            if e.errno != errno.EPIPE:
                raise
        finally:
            with queue_list_lock:
                queue_list.remove(queue)
    except Exception as e:
        traceback.print_exc(file=sys.stderr)


if __name__ == '__main__':
    threading.Thread(target=accept_thread, daemon=True).start()
    device_thread(sys.argv[1])
